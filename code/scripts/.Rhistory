seq_len(x)
seq(from= 1, to = 3)
rep("ellen", 4)
rep(c(2,4), c)
rep(c(2,4), 3)
rep(c("ellen", "hwang"), 3)
rep(c("ellen", "hwang"), each =2
)
sample(1:10, size=10)
summary(x)
x<-(TRUE, FALSE, TRUE)
x<-c(TRUE, FALSE, TRUE)
as.character(x)
x
as.numeric(x)
x
as.logical(x)
as.character(x)
x
y<-c(3, TRUE, FALSE)
y
as.logical(y)
as.character(x)
as.character(y)
u <- c(4, TRUE, FALSE)
as.character(y)
as.character(u)
load(url("http://gastonsanchez.com/teaching/stat133/raiders.RData"))
ls()
scored
against
class(scored)
class(against)
length(scored)
length(against)
scored[7]
scored[1:5]
scored[c(1, 2, 3, 4, 5)]
even_seq <- seq(2, length(scored), by = 2)
scored[even_seq]
scored[0]
scored[18]
last_game <- length(scored)
scored[last_game]
scored2 <- scored
names(scored2) <- 1:length(scored)
scored2[scored2 > 14]
scored2[scored2 < 14]
scored2[scored2 == 14]
scored2[scored2 == 13 | scored2 == 14]
scored2[scored2 >= 7 & scored2 <= 21]
scored2
sort(scored2, decreasing = TRUE)
max(scored)
mean(scored)
median(scored)
summary(scored)
hist(scored)
scored > 20
sum(scored > 20)
sum(scored >= 7 & scored <= 20)
sum([scored>20])
sum(scored < 7)
sum(scored >= 7 & scored <= 20)
sum(scored < 7 | scored > 20)
scored
7 %in% scored
14 %in% scored
scored / 7
round(scored / 7, 2)
sample(scored, size = 6)
# ===================================================
sample(scored, size = 6)
sample(scored, size = 6)
against[7]
against
against[7]
against[1:5]
odd_sequence <- seq(1, length(scored), by 2)
odd_sequence <- seq(1, length(against), by 2)
odd_seq <- seq(1, length(against), by 2)
odd_seq <- seq(1, length(against), by = 2)
odd_seq
against(odd_seq)
against[odd_seq]
library(httr)
response <- GET(url="https://github.com/gastonstat/stat133/raw/master/datasets/superbowl_teams.RData")
load(rawConnection(response$content))
rm(response)
ls()
class(year)
class(winner)
class(loser)
class(year)
length
length
length(year)
length(winner)
length(loser)
winner[1:5]
sort(winner)
sort(unique(winner))
sort(unique(winner), decreasing = TRUE)
even_seq <- seq(2, length(winner), by = 2)
even_seq
winner[even_seq]
odd_seq <- seq(1, length(winner), by = 2)
odd_seq
winner[odd_seq]
win_freqs <- table(winner)
table(win_freqs)
champions <- sort(win_freqs, decreasing = TRUE)
sf_niners <- winner == "San Francisco 49ers"
sf_niners
year[sf_niners]
oak_raid <- winner == "Oakland Raiders"
year[oak_raid]
den_bron <- winner == "Denver Broncos"
year[length(den_bron)]
den_bron <- winner == "Denver Broncos"
year[length(den_bron)]
den_bron <- winner == "Denver Broncos"
year[length(den_bron)]
year[den_bron]
tail(year[den_bron], 1)
winner2 <- winner
winner2 <- winner
winner2 <- winner
winner2
winner2[winner2 == "New York Giants"] <- "NYG"
winner2[winner2 == "New York Jets"] <- "NYJ"
winner2[winner2 == "Kansas City Chiefs"] <- "KCC"
winner2
head(loser, n=5)
loser_even_seq <- seq(2, length(loser), by = 2)
loser[loser_even_seq]
loser_odd_seq <- seq(1, length(loser), by=2)
loser[loser_odd_seq]
los_freqs <- table(loser)
los_freqs
los_freqs[which.max(los_freqs)]
win_teams <- unique(winner)
lose_teams <- unique(loser)
all_team <- union(win_teams, lose_teams)
length(all_team)
setdiff(win_teams, lose_teams)
setdiff(lose_teams, win_teams)
intersect(win_teams, lose_teams)
den_bron <- winner == "Denver Broncos"
tail(year[den_bron], 1)
length(intersect(win_teams,lose_teams))
team_two <- year == 2000
winner[team_two]
den_bron <- winner == "Denver Broncos"
tail(year[den_bron], 1)
loser[which(year ==2000)]
tens <- seq(1970, 2010, by = 10)
year_tens <- year %in% tens
winner[year_tens]
winner[which(year>=1970 & year<=1979)]
loser[which(year>=1990 & year<=1999)]
winner[which(year>=1970 & year<=1979)]
winner[which(year>=1970 & year<=1979)]
loser[which(year>=1990 & year<=1999)]
superbowl_df <- data.frame(year, winner, loser)
superbowl_df
superbowl_df <- data.frame(year, winner, loser)
superbowl_df
superbowl <-list(year, winner, loser)
superbowl
superbowl <-list(year, winner, loser)
superbowl
length(year) == length(winner) == length(loser)
length(year)
length(winner)
length(loser)
length(year) == length(winner)
length(year) == length(winner) length(loser)
length(year) == length(winner) ==  length(loser)
length(year) == length(winner) & length(year) == length(loser)
install.packages("rggobi")
install.packages('rggobi')
iris <- read.csv("file:///Users/ellenhwng/Desktop/bezdekIris.data.txt", header=FALSE,
na.strings=c(".", "NA", "", "?"), strip.white=TRUE, encoding="UTF-8")
head(iris)
iris[iris$V5 == "Iris-setosa]"]
head(iris[iris$V5 == "Iris-setosa]"])
setosa <- iris[ ,iris$V5 == "Iris-setosa"]
setosa <- iris[iris$V5 == "Iris-setosa"]
head(iris)
setosa <- iris[ ,iris$V5 == "Iris-setosa"]
setosa <- iris[ ,which(iris$V5 == "Iris-setosa")]
setosa <- iris[which(iris$V5 == "Iris-setosa")]
which(iris$V5 == "Iris-setosa")
iris[which(iris$V5 == "Iris-setosa")]
setosa <- subset(iris, iris$V5 == "setosa")
setosa
setosa <- subset(iris, V5 == "setosa")
setosa
setosa <- subset(iris, V5 == "setosa")
setosa
class(iris)
setosa <- subset(iris, V5 == "Iris-setosa")
setosa
unique(iris$V5)
versicolor <- subset(iris, V5 = "Iris-versicolor")
virginica <- subset(iris, V5 = "Iris-virginica")
?suppressMessages
?which
which(iris$V5 == "Iris-setosa")
iris[which(iris$V5 == "Iris-setosa")]
which(iris[ ,iris$V5 == "Iris-setosa"])
iris[ ,iris$V5 == "Iris-setosa"]
head(iris)
iris[ ,V5 == "Iris-setosa"]
iris[ , iris$V5 == "Iris-setosa"]
iris$V5 == "Iris-setosa"
iris[iris$V5 == "Iris-setosa"]
iris(iris$V5 == "Iris-setosa")
iris[iris$V5 == "Iris-setosa",]
library(rattle)
?require
rattle()
head(iris3)
head(iris3)
iris3
?melt
gather
?gather
library("DataComputing", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
?suppressMessages
?gather
?melt
?gather
stocks <- data_frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocks
gather(stocks, stock, price, -time)
mini_iris <- iris[c(1, 51, 101), ]
mini_iris
gather(mini_iris, key = flower_att, value = measurement,
Sepal.Length, Sepal.Width, Petal.Length, Petal.Width)
?melt
melt(mini_iris)
install.packages('melt')
install.packages('reshape2')
install.packages("reshape2")
library(melt)
library(reshape2)
melt(mini_iris)
class(melt(mini_iris))
melt(mini_iris, value.name = 'measurement')
melt(mini_iris, value.name = 'measurement')
library('XML')
?erRoot
??erRoot
?xmlROot
?xmlRoot
?grep
c = c('grind', 'blah', 'teeth', 'g', 'r')
grepl('[grind|teeth]', c)
grepl('[(grind)|(teeth)', c)
grepl('[(grind)|(teeth)]', c)
grep('[(grind)|(teeth)]', c)
grep('[(grind)|(teeth)]', c, value = TRUE)
grep('grind|teeth', c, value = TRUE)
1/3
rount(1/3, 4)
round(1/3, 4)
round(1/3, 10)
round(1/3, 20)
?round
round(1/3, -2)
?options
print(1/3)
print(round(1/3, 1000))
library(readr)
iris <- read_csv("https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data",col_names = FALSE)
names(iris) <- c("sepal.length", "sepal.width", "petal.length", "petal.width", "class")
setosa <- iris[iris$class == "Iris-setosa", ]
versicolor <- iris[iris$class == "Iris-versicolor", ]
virginica <- iris[iris$class == "Iris-virginica", ]
setosa_mean <- apply(setosa[1:4], 2, mean)
versicolor_mean <- apply(versicolor[1:4], 2, mean)
virginica_mean <- apply(virginica[1:4], 2, mean)
setosa_mean
versicolor_mean
virginica_mean
library(histogram)
library('histogram')
install.packages('histogram')
library('histogram')
?histogram
y<-rnorm(100)
histogram(y)
?histogram
n<-sum(sample(c(0,1),1000,replace=TRUE))
y<-c(rnorm(n,mean=5,sd=0.1),rnorm(1000-n))
histogram(y,type="regular",penalty="cv",control=list(cvformula=3))
library(stringr)
str_subset(c('hay', 'bay', 'dke'), 'a')
str_subset(c('hay', 'bay', 'dke'), '[^a]')
str_subset(c('hay', 'bay', 'dke', 'adam'), '[^a]')
str_subset(c('hay', 'bay', 'dke', 'adam'), '^a')
str_subset(c('hay', 'bay', 'dke', 'adam'), '[^ad]')
str_extract(states, 'a')
head(mtcars)
names(mtcars)
rownames(mtcars)
names(mtcars)
quit()
?knit
??knit
getwd()
setwd('.')
sessionInfo()
##################################################
# Exploratory Data Analysis
##################################################
# libraries
library(ggplot2)
library(corrplot)
library(GGally)
# Import data
advertising <- read.csv('../../data/Advertising.csv')
advertising['X'] <- NULL
# Exploration and Summary Statistics
str(advertising)
correlation_matrix <- cor(advertising)
sink('eda-output.txt')
correlation_matrix
summary(advertising)
sink(NULL)
save(correlation_matrix, file = "../../data/correlation-matrix.RData")
# ************************************************
# Visualizations
# ************************************************
# histogram of sales
hist_sales <- ggplot(advertising, aes(x = Sales)) + geom_histogram(aes(y = ..density.., fill = ..density..), binwidth = 1) +
geom_density() + scale_fill_gradient("Density", low = '#9BC4E2', high = '#0D4F8B') + ggtitle("Histogram of Sales")
# histogram of tv
hist_tv <- ggplot(advertising, aes(x = TV)) + geom_histogram(aes(y = ..density.., fill = ..density..), binwidth = 10) +
geom_density() + scale_fill_gradient("Density", low = '#CD9B9B', high = '#660000') + ggtitle("Histogram of TV")
# histogram of radio
hist_radio <- ggplot(advertising, aes(x = Radio)) + geom_histogram(aes(y = ..density.., fill = ..density..), binwidth = 5) +
geom_density() + scale_fill_gradient("Density", low = 'palegreen', high = '#006400') + ggtitle("Histogram of TV")
# histogram of newspaper
hist_newspaper <- ggplot(advertising, aes(x = Newspaper)) + geom_histogram(aes(y = ..density.., fill = ..density..), binwidth = 10) +
geom_density() + scale_fill_gradient("Density", low = '#DDA0DD', high = '#2E0854') + ggtitle("Histogram of TV")
# correlation plot between all variables
corr_plot <- corrplot(cor(advertising))
# Scatter Plot Matrix of All Variables
scatter_matrix <- ggpairs(advertising[,1:4], title = "Scatter Plot Matrix of All Variables")
# ************************************************
# Export Visualizations
# ************************************************
png('../../images/histogram-sales.png')
hist_sales
dev.off()
png('../../images/histogram-tv.png')
hist_tv
dev.off()
png('../../images/histogram-radio.png')
hist_radio
dev.off()
png('../../images/histogram-newspaper.png')
hist_newspaper
dev.off()
png('../../images/scatterplot-matrix.png')
scatter_matrix
dev.off()
setwd("~/Documents/Stat_159/hw/stat159_hw03/data")
setwd("~/Documents/Stat_159/hw/stat159_hw03/code/scripts")
##################################################
# Exploratory Data Analysis
##################################################
# libraries
library(ggplot2)
library(corrplot)
library(GGally)
# Import data
advertising <- read.csv('../../data/Advertising.csv')
advertising['X'] <- NULL
# Exploration and Summary Statistics
str(advertising)
correlation_matrix <- cor(advertising)
sink('eda-output.txt')
correlation_matrix
summary(advertising)
sink(NULL)
save(correlation_matrix, file = "../../data/correlation-matrix.RData")
# ************************************************
# Visualizations
# ************************************************
# histogram of sales
hist_sales <- ggplot(advertising, aes(x = Sales)) + geom_histogram(aes(y = ..density.., fill = ..density..), binwidth = 1) +
geom_density() + scale_fill_gradient("Density", low = '#9BC4E2', high = '#0D4F8B') + ggtitle("Histogram of Sales")
# histogram of tv
hist_tv <- ggplot(advertising, aes(x = TV)) + geom_histogram(aes(y = ..density.., fill = ..density..), binwidth = 10) +
geom_density() + scale_fill_gradient("Density", low = '#CD9B9B', high = '#660000') + ggtitle("Histogram of TV")
# histogram of radio
hist_radio <- ggplot(advertising, aes(x = Radio)) + geom_histogram(aes(y = ..density.., fill = ..density..), binwidth = 5) +
geom_density() + scale_fill_gradient("Density", low = 'palegreen', high = '#006400') + ggtitle("Histogram of TV")
# histogram of newspaper
hist_newspaper <- ggplot(advertising, aes(x = Newspaper)) + geom_histogram(aes(y = ..density.., fill = ..density..), binwidth = 10) +
geom_density() + scale_fill_gradient("Density", low = '#DDA0DD', high = '#2E0854') + ggtitle("Histogram of TV")
# correlation plot between all variables
corr_plot <- corrplot(cor(advertising))
# Scatter Plot Matrix of All Variables
scatter_matrix <- ggpairs(advertising[,1:4], title = "Scatter Plot Matrix of All Variables")
# ************************************************
# Export Visualizations
# ************************************************
png('../../images/histogram-sales.png')
hist_sales
dev.off()
png('../../images/histogram-tv.png')
hist_tv
dev.off()
png('../../images/histogram-radio.png')
hist_radio
dev.off()
png('../../images/histogram-newspaper.png')
hist_newspaper
dev.off()
png('../../images/scatterplot-matrix.png')
scatter_matrix
dev.off()
##################################################
# Regression Analysis
##################################################
# libraries
library(ggplot2)
# Import data
advertising <- read.csv('../../data/Advertising.csv')
advertising['X'] <- NULL
# ************************************************
# Regression
# ************************************************
mult_reg <- lm(Sales ~ TV + Newspaper + Radio, data = advertising)
summary_mult_reg <- summary(mult_reg)
save(mult_reg, summary_mult_reg, file = "../../data/regression.RData")
# ************************************************
# Regression Scatter Plot
# ************************************************
# Scatter Plot of Sales on TV
scatter_tv_sales <- ggplot(advertising, aes(x = TV, y = Sales)) + geom_point(alpha = 0.6, colour = '#660000') + geom_smooth(method = 'lm') +
ggtitle("Scatter Plot: TV vs Sales")
scatter_tv_sales
# Scatter Plot of Sales on Radio
scatter_radio_sales <- ggplot(advertising, aes(x = Radio, y = Sales)) + geom_point(alpha = 0.6, colour = '#006400') + geom_smooth(method = 'lm') +
ggtitle("Scatter Plot: Radio vs Sales")
scatter_radio_sales
# Scatter Plot of Sales on Newspaper
scatter_tv_newspaper <- ggplot(advertising, aes(x = Newspaper, y = Sales)) + geom_point(alpha = 0.6, colour = '#2E0854') + geom_smooth(method = 'lm') +
ggtitle("Scatter Plot: Newspaper vs Sales")
scatter_tv_newspaper
# Residual Plot
plot(mult_reg, which = 1)
# Normal Q-Q Plot
plot(mult_reg, which = 2)
# Scale-Location Plot
plot(mult_reg, which = 3)
# ************************************************
# Export Visualizations
# ************************************************
png('../../images/scatter-tv-sales.png')
scatter_tv_sales
dev.off()
png('../../images/scatter-radio-sales.png')
scatter_radio_sales
dev.off()
png('../../images/scatter-newspaper-sales.png')
scatter_tv_newspaper
dev.off()
png('../../images/residual-plot.png')
plot(mult_reg, which = 1)
dev.off()
png('../../images/normal-qq-plot.png')
plot(mult_reg, which = 2)
dev.off()
png('../../images/scale-location-plot.png')
plot(mult_reg, which = 3)
dev.off()
sessionInfo()
R.Version()$os
sink('../../session-info.txt')
sessionInfo()
sink(NULL)
##################################################
# Session Info
##################################################
sink('../../session-info.txt')
sessionInfo()
sink(NULL)
##################################################
# Session Info
##################################################
sink('../../session-info.txt')
sessionInfo()
sink(NULL)
library()
##################################################
# Session Info
##################################################
sink('../../session-info.txt')
sessionInfo()
sink(NULL)
